{
  "swagger": "2.0",
  "info": {
    "description": "Unvired Mobile Platform Rest API. API Authentication is HTTP BASIC Auth, the user should be passed in as COMPANY\\USER. Note: Due to an issue with the way the docs are generated, the response object is not generated correctly.  Until the upstream provider corrects it please check actual responses.",
    "version": "V2 (Release 2016)",
    "title": "The UMP Rest API",
    "contact": {
      "name": "Unvired Inc."
    },
    "license": {
      "name": "Commercial License",
      "url": "http://unvired.com/resources/sdk-license"
    }
  },
  "host": "demo.unvired.io",
  "basePath": "/UMP",
  "tags": [
    {
      "name": "companies",
      "description": "Operations on a Company"
    },
    {
      "name": "session",
      "description": "Session management for Users"
    },
    {
      "name": "libraries",
      "description": "Operations on a Library"
    },
    {
      "name": "messages",
      "description": "Operations on Messages"
    },
    {
      "name": "groups",
      "description": "Operations on a Group"
    },
    {
      "name": "status",
      "description": "Platform Status"
    },
    {
      "name": "users",
      "description": "Operations on a User"
    },
    {
      "name": "applications",
      "description": "Operations on Applications"
    },
    {
      "name": "attachments",
      "description": "Operations on Attachments (files in cache)"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/API/v2/applications/{appName}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Returns the Application details ",
        "description": "Returns the Application details.  Any valid user of a company can access this API",
        "operationId": "getApplicationInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "appName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application details retrieved",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/activate/{frontendUser}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Activate an Application",
        "description": "Activate an Application for the Unvired User / Frontend User or Device. Any valid application user can access this API",
        "operationId": "activateUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to activate",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user or device to activate for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Application activated",
            "schema": {
              "$ref": "#/definitions/ActivationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/assign": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Gets application assignment status",
        "description": "Gets the application assignment status. Super Admin or Administrator of the current company can access this API",
        "operationId": "getAssignedAppStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to check assignment status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application has been assigned",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application has not been assigned yet"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Assign an application",
        "description": "Assign an applicaiton so it can be deployed for users. Super Admin or Administrator of the current company can access this API",
        "operationId": "assignApplicationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to assign",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Application assigned",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or app cannot be assigned or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "attachments"
        ],
        "summary": "Download attachment/file from the UMP cache",
        "description": "Downloads (multipart mime) an attachment/file from the UMP cache. This file can then be accessed by the application for download to a mobile device or other destinations.  Any Application user of the current company can access this API",
        "operationId": "downloadAttachmentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/octet-stream",
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id of the file to download, has to be a GUID",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "path",
            "description": "Application name associated with the attachment",
            "required": true,
            "type": "string"
          },
          {
            "name": "credentials",
            "in": "query",
            "description": "System credentials for backend systems, JSON format [{ \"port\": \"LOGICAL_PORT_NAME\", \"user\": \"USER_NAME\", \"password\": \"PASSWORD\"}]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            }
          },
          "204": {
            "description": "File Queued for download",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "File not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "attachments"
        ],
        "summary": "Upload attachment/file to the UMP cache",
        "description": "Uploads (multipart mime) an attachment/file to the UMP cache. This file can then be accessed by the application and uploaded to a final server like FTP, DMS etc.  Any Application user of the current company can access this API",
        "operationId": "uploadAttachmentUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id of the uploaded file, has to be a GUID",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "path",
            "description": "Application name requiring the attachment",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file attachment",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "File uploaded",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/authenticate/{frontendUser}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Authenticate an Application",
        "description": "Authenticate an Application for the Unvired User / Frontend User or Device. Any valid application user can access this API",
        "operationId": "authenticateUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to authenticate",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user or device to authenticate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticated",
            "schema": {
              "$ref": "#/definitions/AuthenticationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/copy": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Gets application copy status",
        "description": "Gets the application copy status. Super Admin or Administrator of the current company can access this API",
        "operationId": "getCopiedAppStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to check copy status",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application has been copied",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application has not been copied yet"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Copy an application",
        "description": "Copy an applicaiton so it can be deployed for users. Super Admin or Administrator of the current company can access this API",
        "operationId": "copyApplicationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to copy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Application copied",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or app cannot be copied or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/deploy/{frontendUser}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Deploy an Application",
        "description": "Deploy an Application for the Unvired User / Frontend User or Device. Super Admin or Administrator of the current company can access this API",
        "operationId": "deployAppUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to deploy",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend User or Device to deploy for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Application deployed",
            "schema": {
              "$ref": "#/definitions/ApplicationDeploymentResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/execute/{funcName}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Execute an Application Function",
        "description": "Execute an Application Function to leverage functionality on SAP, Oracle, Sharepoint etc. Any application user can access this API",
        "operationId": "executeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application that the function belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "funcName",
            "in": "path",
            "description": "Function to execute",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Input Message Content Type",
            "required": true,
            "type": "string",
            "default": "application/xml",
            "enum": [
              "application/xml",
              "application/json"
            ]
          },
          {
            "name": "inputMessage",
            "in": "query",
            "description": "Input message for the function",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageFormat",
            "in": "query",
            "description": "Message format",
            "required": false,
            "type": "string",
            "default": "standard",
            "enum": [
              "standard",
              "custom"
            ]
          },
          {
            "name": "frontendUser",
            "in": "query",
            "description": "Frontend user or device requesting the execution, if only one frontend user us present this parameter is optional",
            "required": false,
            "type": "string"
          },
          {
            "name": "queuedExecute",
            "in": "query",
            "description": "Execute and return results or queue for execution",
            "required": true,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "externalReference",
            "in": "query",
            "description": "Optional external reference id to associate with the message, mandatory if queued request (async)",
            "required": false,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "query",
            "description": "If the type of user is backendUser, then the UMP logical name of the port (system) these users belong to is specified here",
            "required": false,
            "type": "string"
          },
          {
            "name": "credentials",
            "in": "query",
            "description": "System credentials for backend systems, JSON format [{ \"port\": \"LOGICAL_PORT_NAME\", \"user\": \"USER_NAME\", \"password\": \"PASSWORD\"}]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Function executed",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          },
          "204": {
            "description": "Function did not return any output",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "406": {
            "description": "Invalid Accept Type, application is not capable of returning the requested type"
          },
          "415": {
            "description": "Invalid Content Type, application is not capable of accepting the message type"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/executefor/{funcName}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Execute an Application Function for other userse",
        "description": "Execute an Application Function on behalf of other users to leverage functionality on SAP, Oracle, Sharepoint etc. Only application users of type External Server can access this API",
        "operationId": "executeForUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application that the function belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "funcName",
            "in": "path",
            "description": "Function to execute",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Input Message Content Type",
            "required": true,
            "type": "string",
            "default": "application/xml",
            "enum": [
              "application/xml",
              "application/json"
            ]
          },
          {
            "name": "inputMessage",
            "in": "query",
            "description": "Input message for the function",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageFormat",
            "in": "query",
            "description": "Message format",
            "required": false,
            "type": "string",
            "default": "standard",
            "enum": [
              "standard",
              "custom"
            ]
          },
          {
            "name": "frontendUser",
            "in": "query",
            "description": "Frontend user requesting the execution, if only one frontend user is present this parameter is optional.  (user has to be of type External Server)",
            "required": false,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of the user(s) to push the message",
            "required": true,
            "type": "string",
            "enum": [
              "unviredUser",
              "frontendUser",
              "backendUser",
              "federationUser",
              "group"
            ]
          },
          {
            "name": "users",
            "in": "query",
            "description": "Comma separated list of users based on the userType",
            "required": false,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Comma separated list of groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "query",
            "description": "If the type of user is backendUser, then the UMP logical name of the port (system) these users belong to is specified here",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalReference",
            "in": "query",
            "description": "External reference id to associate with the message",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Function executed",
            "schema": {
              "$ref": "#/definitions/ExecuteForResponse"
            }
          },
          "204": {
            "description": "Function did not return any output",
            "schema": {
              "$ref": "#/definitions/ExecuteForResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "406": {
            "description": "Invalid Accept Type, application is not capable of returning the requested type"
          },
          "415": {
            "description": "Invalid Content Type, application is not capable of accepting the message type"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/frontendusers/{frontendUser}/messagecount": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get message count",
        "description": "Gets the count of ready and pending messages. Any application user can access this API",
        "operationId": "getReadyPendingMsgCountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to check",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user / device to check",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Count returned",
            "schema": {
              "$ref": "#/definitions/MessageCountResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/frontendusers/{frontendUser}/registerforpush/{pushId}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Register for Push notifications",
        "description": "Register for Push notifications for an Application. Any application user can access this API",
        "operationId": "pushRegisterUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to register for push",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user / device for push",
            "required": true,
            "type": "string"
          },
          {
            "name": "pushId",
            "in": "path",
            "description": "Unique Push Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Push registered",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Deregister for Push notifications",
        "description": "Deregister for Push notifications for an Application. Any application user can access this API",
        "operationId": "deletePushRegisterUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to deregister for push",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user / device for push",
            "required": true,
            "type": "string"
          },
          {
            "name": "pushId",
            "in": "path",
            "description": "Unique Push Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Push deregistered",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/library/{libName}": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Deploy a library for an application",
        "description": "Deploy a library for an application. In a Development environment Super Admin,Administrator or Developer of the current company can access this API. In Production environment Super Admin or Administrator of the current company can access this API",
        "operationId": "deployLibraryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to deploy library to",
            "required": true,
            "type": "string"
          },
          {
            "name": "libName",
            "in": "path",
            "description": "library to be deployed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Library already deployed",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "204": {
            "description": "Library successfully deployed",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or lib cannot be deployed or does not have a valid plan"
          },
          "404": {
            "description": "Application or Library not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Deploy a library for an application",
        "description": "Deploy a library for an application. In a Development environment Super Admin,Administrator or Developer of the current company can access this API. In Production environment Super Admin or Administrator of the current company can access this API",
        "operationId": "unDeployLibraryUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to deploy library to",
            "required": true,
            "type": "string"
          },
          {
            "name": "libName",
            "in": "path",
            "description": "library to be deployed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Library successfully undeployed",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or lib cannot be deployed or does not have a valid plan"
          },
          "404": {
            "description": "Application or Library not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/message/{frontendUser}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Dowload message",
        "description": "Download message that is ready on UMP for an Application. Any application user can access this API",
        "operationId": "downloadMessageUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to download message",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user / device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Message content retrieved",
            "schema": {
              "$ref": "#/definitions/DownloadMsgResponse"
            }
          },
          "204": {
            "description": "No messages",
            "schema": {
              "$ref": "#/definitions/DownloadMsgResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/properties": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Retrieve all the properties for an Application",
        "description": "Retrieve all the properties for an Application. Properties are preconfigured by the administrator of UMP. Any application user can access this API",
        "operationId": "getApplicationPropertiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrieve properties",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Applciation Properties retrieved",
            "schema": {
              "$ref": "#/definitions/ApplicationPropertiesResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or properties not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/properties/{property}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Retrieve specific property for an Application",
        "description": "Retrieve specific property for an Application. Properties are preconfigured by the administrator of UMP. Any application user can access this API",
        "operationId": "getApplicationPropertyUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrieve property",
            "required": true,
            "type": "string"
          },
          {
            "name": "property",
            "in": "path",
            "description": "Property to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Applciation Property retrieved",
            "schema": {
              "$ref": "#/definitions/ApplicationPropertiesResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or property not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Update specific property for an Application",
        "description": "Update specific property for an Application. Properties are preconfigured by the administrator of UMP. Any application user can access this API",
        "operationId": "updateApplicationPropertyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to update property",
            "required": true,
            "type": "string"
          },
          {
            "name": "property",
            "in": "path",
            "description": "Property to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Application property value to set",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Applciation Property updated",
            "schema": {
              "$ref": "#/definitions/ApplicationPropertiesResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or property not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Update specific property for an Application",
        "description": "Update specific property for an Application. Properties are preconfigured by the administrator of UMP. Any application user can access this API",
        "operationId": "updateApplicationPropertyUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to update property",
            "required": true,
            "type": "string"
          },
          {
            "name": "property",
            "in": "path",
            "description": "Property to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Application property value to set",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Applciation Property updated",
            "schema": {
              "$ref": "#/definitions/ApplicationPropertiesResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or property not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/pushmessage": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Push a message for an Application",
        "description": "Push a message for an Application. A message is either standard or custom XML or JSON content that is required by the mobile or web application. Any application user can access this API",
        "operationId": "pushMessageUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to push message",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Input Message Content Type",
            "required": true,
            "type": "string",
            "default": "application/xml",
            "enum": [
              "application/xml",
              "application/json"
            ]
          },
          {
            "name": "inputMessage",
            "in": "query",
            "description": "XML or JSON message to push",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageFormat",
            "in": "query",
            "description": "Message format",
            "required": true,
            "type": "string",
            "enum": [
              "standard",
              "custom"
            ]
          },
          {
            "name": "alert",
            "in": "query",
            "description": "Alert (Push Notification) message that is displayed to the user when this message is delivered.  If not set notification to download updates will be displayed",
            "required": false,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of the user(s) to push the message",
            "required": true,
            "type": "string",
            "enum": [
              "unviredUser",
              "frontendUser",
              "backendUser",
              "federationUser",
              "group"
            ]
          },
          {
            "name": "users",
            "in": "query",
            "description": "Comma separated list of users based on the userType",
            "required": false,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Comma separated list of groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "query",
            "description": "If the type of user is backendUser, then the UMP logical name of the port (system) these users belong to is specified here",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalReference",
            "in": "query",
            "description": "Optional external reference id to associate with the message",
            "required": false,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "query",
            "description": "Frontend user requesting the execution, if only one frontend user is present this parameter is optional",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Message pushed",
            "schema": {
              "$ref": "#/definitions/PushMessageResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "406": {
            "description": "Invalid Accept Type, application is not capable of returning the requested type"
          },
          "415": {
            "description": "Invalid Content Type, application is not capable of accepting the message type"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/pushnotification": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Push a notification for an Application",
        "description": "Push a notification for an Application. Any application user can access this API",
        "operationId": "pushNotificationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to push notification",
            "required": true,
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Notification Title",
            "required": true,
            "type": "string"
          },
          {
            "name": "alert",
            "in": "query",
            "description": "Notification Alert message",
            "required": true,
            "type": "string"
          },
          {
            "name": "sound",
            "in": "query",
            "description": "Sound to play for the notification",
            "required": false,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Notification action",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Notification category",
            "required": false,
            "type": "string"
          },
          {
            "name": "context",
            "in": "query",
            "description": "Notification context, can be any small string of data that the client applicaiton can use to associate the data and the notification",
            "required": false,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of the user(s) to push the message",
            "required": true,
            "type": "string",
            "enum": [
              "unviredUser",
              "frontendUser",
              "backendUser",
              "federationUser",
              "group"
            ]
          },
          {
            "name": "users",
            "in": "query",
            "description": "Comma separated list of users based on the userType",
            "required": false,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Comma separated list of groups",
            "required": false,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "query",
            "description": "If the type of user is backendUser, then the UMP logical name of the port (system) these users belong to is specified here",
            "required": false,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "query",
            "description": "Frontend user requesting the execution, if only one frontend user is present this parameter is optional",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Notification pushed",
            "schema": {
              "$ref": "#/definitions/PushNotificationResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/settings/{key}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Retrieve setting for an Application",
        "description": "Retrieve specific setting for an Application (Specify key as * to fetch all). Any application user can access this API",
        "operationId": "getSettingsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrieve setting",
            "required": true,
            "type": "string",
            "default": "*"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting/Key to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Applciation settings retrieved",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create or Update setting for an Application",
        "description": "Update setting for an Application. Any application user can access this API",
        "operationId": "createSettingsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrieve setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting/Key to retrieve",
            "required": true,
            "type": "string",
            "default": "*"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value to store",
            "required": true,
            "type": "string"
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Secure setting, value not displayed",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Hidden settings are not displayed ",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "mobileSetting",
            "in": "query",
            "description": "Setting to be created as mobile setting",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Application setting created",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "204": {
            "description": "Application settings updated",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Create or Update setting for an Application",
        "description": "Update setting for an Application. Any application user can access this API",
        "operationId": "createSettingsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrieve setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting/Key to retrieve",
            "required": true,
            "type": "string",
            "default": "*"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value to store",
            "required": true,
            "type": "string"
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Secure setting, value not displayed",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Hidden settings are not displayed ",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "mobileSetting",
            "in": "query",
            "description": "Setting to be created as mobile setting",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Application setting created",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "204": {
            "description": "Application settings updated",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete setting for an Application",
        "description": "Delete setting for an Application. Any application user can access this API",
        "operationId": "deleteSettingsUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to delete setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting/Key to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Application setting deleted",
            "schema": {
              "$ref": "#/definitions/ApplicationSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/undeploy/{frontendUser}": {
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Undeploy an Application",
        "description": "Undeploy an Application for the Unvired User / Frontend User or Device. Super Admin or Administrator of the current company can access this API",
        "operationId": "undeployAppUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to undeploy",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend user or device to undeploy for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Application undeployed",
            "schema": {
              "$ref": "#/definitions/ApplicationUndeploymentResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/users": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Get users deployment status for an application",
        "description": "Gets the users deployment status for an application. Super Admin or Administrator of the current company can access this API",
        "operationId": "getApplicationUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to check",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Deployment status to check",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": [
              "ALL",
              "DEPLOYED",
              "ACTIVATED",
              "ERROR"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of users returned",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to return the users",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned",
            "schema": {
              "$ref": "#/definitions/ApplicationUserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/applications/{appName}/usersettings/{key}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Retrieve User specific settings for an Application",
        "description": "Retrieve User specific settings (specify key as * to fetch all) for an Application / Unvired User. Any application user can access this API",
        "operationId": "getUserSettingsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to retrive setting",
            "required": true,
            "type": "string",
            "default": "*"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting / Key name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User setting retrieved",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Create or modify User specific settings for an Application",
        "description": "Create or modify User specific settings for an Application / Unvired User. Any application user can access this API",
        "operationId": "createUserSettingsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to create or modify the setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting / Key to create or modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value to store",
            "required": true,
            "type": "string"
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Secure setting, value not displayed",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Hidden settings are not displayed ",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "User setting created",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "204": {
            "description": "User setting updated",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Create or modify User specific settings for an Application",
        "description": "Create or modify User specific settings for an Application / Unvired User. Any application user can access this API",
        "operationId": "createUserSettingsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to create or modify the setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting / Key to create or modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value to store",
            "required": true,
            "type": "string"
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Secure setting, value not displayed",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "hidden",
            "in": "query",
            "description": "Hidden settings are not displayed ",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "User setting created",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "204": {
            "description": "User setting updated",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "applications"
        ],
        "summary": "Delete User specific settings for an Application",
        "description": "Delete User specific settings for an Application / Unvired User. Any application user can access this API",
        "operationId": "deleteUserSettingsUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "Application to delete the setting",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Setting/Key to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User setting deleted",
            "schema": {
              "$ref": "#/definitions/ApplicationUserSettingsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Application or key not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/attachments/{attachmentId}": {
      "delete": {
        "tags": [
          "attachments"
        ],
        "summary": "Delete attachment/file in the UMP cache",
        "description": "Delete an attachment/file in the UMP cache. Any Application user of the current company can access this API",
        "operationId": "deleteAttachmentUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id of the cached file, has to be a GUID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "File deleted",
            "schema": {
              "$ref": "#/definitions/AttachmentResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "File not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "List all Companies ",
        "description": "Returns a list of all available Companies.  Super Admin or Admin of root company can access this API",
        "operationId": "getCompaniesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Create a company",
        "description": "Create a company. Super Admin or Admin of root company can access this API",
        "operationId": "createCompanyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company to create",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyName",
            "in": "query",
            "description": "Name of the company",
            "required": true,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": true,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "City",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "State",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country",
            "required": true,
            "type": "string"
          },
          {
            "name": "zipcode",
            "in": "query",
            "description": "Zip Code",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password",
            "required": false,
            "type": "string"
          },
          {
            "name": "folder",
            "in": "query",
            "description": "Company Data Folder in case of Data Center Edition",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketname",
            "in": "query",
            "description": "Company Bucket Name in case of AWS or Google Edition",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketkey",
            "in": "query",
            "description": "Company Bucket Key in case of AWS or Google Edition",
            "required": true,
            "type": "string"
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Company Bucket password in case of AWS or Google Edition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Company created",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{companyAlias}/groups/{groupName}/membership/{userName}": {
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Remove membership of user from Group",
        "description": "Remove membership of user from Group of the specified company. Super Admin or Administrator of the root company can access this API (disallowed in High Security mode)",
        "operationId": "deleteGroupMemberUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyAlias",
            "in": "path",
            "description": "Company user belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "path",
            "description": "Group to remove member",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to remove from Group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Group membership removed",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Group or User not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{companyAlias}/users/{userName}/backendusers/{backendUser}/ports/{portName}": {
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Delete Backend User belonging to another company",
        "description": "Delete a Backend User for the Unvired user of another company. Only the Super Admin or Administrator of the root company can access this API (disallowed in High Security mode)",
        "operationId": "deleteBackendUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyAlias",
            "in": "path",
            "description": "Company user belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "userName",
            "required": true,
            "type": "string"
          },
          {
            "name": "backendUser",
            "in": "path",
            "description": "Unvired User whose backend user is to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "path",
            "description": "Port (System) that the backend user belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Backend User deleted",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or Unvired User or Backend User or Port not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{companyAlias}/users/{userName}/federationusers/{federationUser}/applications/{appName}": {
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Delete a Federation User belonging to other company",
        "description": "Delete a Federation User for the Unvired user of another company. Only the Super Admin or Administrator of the root company can access this API (disallowed in High Security mode)",
        "operationId": "deleteFederationUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyAlias",
            "in": "path",
            "description": "Company user belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User that the Federation User belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "federationUser",
            "in": "path",
            "description": "Federation User to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "path",
            "description": "Application that the Federation User belongs to",
            "required": true,
            "type": "string",
            "default": "ALL"
          }
        ],
        "responses": {
          "201": {
            "description": "Federation User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or Unvired User or Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{companyAlias}/users/{userName}/frontendusers/{frontendUser}": {
      "delete": {
        "tags": [
          "companies"
        ],
        "summary": "Delete Frontend User or Device belonging to another company",
        "description": "Delete a Frontend User or Device for the Unvired user of another company. Only the Super Admin or Administrator of the root company can access this API (disallowed in High Security mode)",
        "operationId": "deleteFrontendUserUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyAlias",
            "in": "path",
            "description": "Company user belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User whose frontend user is to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend User to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Frontend User deleted",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or Unvired User or Frontend user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{company}": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Retrieve company information ",
        "description": "Retrieve the company information. Super Admin or Admin of root company or current company can access this API",
        "operationId": "getCompanyInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "Company to retrive",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "companies"
        ],
        "summary": "Update a company",
        "description": "Update a company. Super Admin or Admin of root or current company can access this API",
        "operationId": "updateCompanyUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "Company to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyName",
            "in": "query",
            "description": "Name of the company",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "City",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "State",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country",
            "required": false,
            "type": "string"
          },
          {
            "name": "zipcode",
            "in": "query",
            "description": "Zip Code",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Company updated",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{company}/plans": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Retrieve all plans for a company",
        "description": "Retrieves all the plans (standard or custom) available for a company. Super Admin or Admin of root company can access this API",
        "operationId": "getPlansUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "Company to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/companies/{company}/plans/{planName}": {
      "post": {
        "tags": [
          "companies"
        ],
        "summary": "Activates a new plan for a company",
        "description": "Activates a new plan (standard or custom) for a company. Super Admin or Admin of root company can access this API",
        "operationId": "activatePlanUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "Company to activate a new plan for",
            "required": true,
            "type": "string"
          },
          {
            "name": "planName",
            "in": "path",
            "description": "Plan name to activate",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Plan start date (mm/dd/yyyy)",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "Plan end date (mm/dd/yyyy)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Plan activated",
            "schema": {
              "$ref": "#/definitions/CompanyResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or plan not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List all Groups ",
        "description": "Returns a list of all available Groups. Any valid user of current company or Super Admin or Admin of root company can access this API",
        "operationId": "getGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company to fetch the group, if empty authentication company is used",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups returned",
            "schema": {
              "$ref": "#/definitions/GroupsResponse"
            }
          },
          "204": {
            "description": "Company or groups not found",
            "schema": {
              "$ref": "#/definitions/GroupsResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a Group ",
        "description": "Create a group. Super Admin or Administrator of the root company or the current company can access this API",
        "operationId": "createGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company to create the group, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of the Group to create",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the Group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Group created",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/groups/{groupName}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Retrieve Group ",
        "description": "Returns the group information. Any valid user of a company can access this API",
        "operationId": "getGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "Group to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company to fetch the group, if empty authentication company is used",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Group details retrieved",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Modify a Group",
        "description": "Modify a group. Super Admin or Administrator of the root company or the current company can access this API",
        "operationId": "updateGroupUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "Group to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company to create the group, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the Group to update",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Group updated",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/groups/{groupName}/memberships": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Add a Group member",
        "description": "Add a group member. Super Admin or Administrator of the root company or the current company can access this API",
        "operationId": "createGroupMemberUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "Group to add member",
            "required": true,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company to create the group, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Unvired User to add to the Group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Group member added",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Group or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/groups/{groupName}/memberships/{userName}": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Remove membership of user from Group",
        "description": "Remove membership of user from Group. Super Admin or Administrator of the root company or the current company can access this API",
        "operationId": "deleteGroupMemberUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "Group to remove member",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to remove from Group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Group membership removed",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Group or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/libraries/{libName}": {
      "get": {
        "tags": [
          "libraries"
        ],
        "summary": "Returns the Library details",
        "description": "Returns the details about the Library. Any valid user of the current company can access this API",
        "operationId": "getLibraryInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "libName",
            "in": "path",
            "description": "libName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Library details returned",
            "schema": {
              "$ref": "#/definitions/LibraryResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Library not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/messages/conversation/{id}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Returns the status of the specified message (Conversation Id)",
        "description": "Returns the status of the message identified by its Conversation Id.  Any valid user of a company can access this API",
        "operationId": "getStatusByConversationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UMP Conversation Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of message returned",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/messages/externalReference/{externalId}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Returns the status of the specified message (External Reference)",
        "description": "Returns the status of the specified message identified by the external reference number.  Any valid user of a company can access this API",
        "operationId": "getStatusByExternalReferenceUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "External Reference",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of message returned",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Message not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/messages/frontendusers/{frontendUser}/conversation/{id}": {
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Confirms the download of the specified message (Conversation Id)",
        "description": "Confirms that the message identified by the Conversation Id has been successfully downloaded.  Confirmed messages will never be available for download again.  Any valid user of a company can access this API",
        "operationId": "deleteStatusByConversationUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend User to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "UMP Conversation Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Message confirmed",
            "schema": {
              "$ref": "#/definitions/MessageResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan or confirming other users message"
          },
          "404": {
            "description": "Message not ound"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/session": {
      "post": {
        "tags": [
          "session"
        ],
        "summary": "Create a session for Unvired User",
        "description": "Creates a session for the Unvired user.  If building apps where the session needs to be restricted to a single sesion via UMP, this API is useful.  Any valid user of a company can access this API.",
        "operationId": "getSessionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Session created",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/auth token, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan or session already existing and multiple sessions not enabled"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/session/{sessionId}": {
      "delete": {
        "tags": [
          "session"
        ],
        "summary": "Logout from a session for Unvired User",
        "description": "Logout form an existing session for the Unvired user.  Every session create should have a callto session logout.  Any valid user of a company can access this API.",
        "operationId": "logoutSessionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "sessionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Session logged out",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/auth token, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Session not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Returns the UMP server Information",
        "description": "Returns detailed information about the UMP server. Administrators of a company can access this API",
        "operationId": "getUMPInfoUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "Provide expanded details",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "UMP Information returned",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/status/applications": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Returns the list of Applications",
        "description": "Returns list of applications available for the company and detailed technical information about the application. Administrators of a company can access this API",
        "operationId": "getApplicationStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Application status returned",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/status/applications/{appName}": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Returns the detailed Application Status",
        "description": "Returns detailed information about the application like Users, Messages etc. Administrators of a company can access this API",
        "operationId": "getAppDetailedStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "appName",
            "in": "path",
            "description": "appName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Application status returned",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/status/notifications": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Returns the Administrator Alerts",
        "description": "Returns the alerts/notifications for the logged in Administrator for the last 24 hours. Administrators of a company can access this API",
        "operationId": "getNotificationStatusUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Application status returned",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List all Unvired Users ",
        "description": "Returns a list of all available Unvired Users.  Any valid user of a company can access this API or SuperAdmin/Admin of the root company (disallowed in High Security mode)",
        "operationId": "getUsersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company to fetch the users, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of users to list",
            "required": false,
            "type": "string",
            "default": "APPLICATION",
            "enum": [
              "APPLICATION",
              "DEVELOPER",
              "ADMIN",
              "SUPER_ADMIN"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of users returned",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from which to return the users",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users returned",
            "schema": {
              "$ref": "#/definitions/UsersResponse"
            }
          },
          "204": {
            "description": "No users found",
            "schema": {
              "$ref": "#/definitions/UsersResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create Unvired User",
        "description": "Creates an Unvired User.  Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company can access this API",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "company",
            "in": "query",
            "description": "Company the user belongs to, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Unvired User Name to create (should be between 5 to 20 characters)",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password to set, if not provided password is auto generated",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First Name of the  user",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last Name of the  user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userType",
            "in": "query",
            "description": "Type of user to create",
            "required": true,
            "type": "string",
            "enum": [
              "APPLICATION",
              "ADMIN",
              "DEVELOPER"
            ]
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number of the  user",
            "required": false,
            "type": "string"
          },
          {
            "name": "mailId",
            "in": "query",
            "description": "Email Id of the  user",
            "required": true,
            "type": "string"
          },
          {
            "name": "verifyMail",
            "in": "query",
            "description": "Should the email be verified?  If true, an email with a one time token to verify the email will be sent",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/:me/changepassword": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Reset or Change Unvired User Password",
        "description": "This API can be used to change the password for the Unvired user. If the user knows their old password, the credentials are authenticated against existing password and a password change is allowed. If the password is forgotten, the password can be reset with an earlier issued reset token (forgotPassword API).  Only the current user can access this API",
        "operationId": "updateUserPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "newPassword",
            "in": "query",
            "description": "The new password for the Unvired User",
            "required": false,
            "type": "string"
          },
          {
            "name": "resetToken",
            "in": "query",
            "description": "The resetToken obtained via email to reset a forgotten password",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Password changed",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/:me/forgotpassword": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Forgot Password",
        "description": "This API can be used to request a reset token (forgot password). The Company/User is provided via HTTP Basic Authentication, however the passsword is not validated and can be empty.  Only the current user can access this API",
        "operationId": "forgotUserPasswordUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Reset token sent",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/:me/verifyEmail": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Verify Email",
        "description": "This API can be used to request a verification email. Only the current user can access this API",
        "operationId": "sendVerifyEmailUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Verification mail sent",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "204": {
            "description": "Email already verified",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Verify Email",
        "description": "This API can be used to verify the email of the user. Only the current user can access this API",
        "operationId": "verifyEmailUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email already verified",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "204": {
            "description": "Email verification successfull",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve Unvired User",
        "description": "Rrerieves the details of an Unvired User. If the userName passed is \":me\", the current user's details are fetched. The current user (can fetch own details only), Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company (can fetch any user details) can access this API",
        "operationId": "getUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to fetch",
            "required": true,
            "type": "string",
            "default": ":me"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company the user belongs to, if empty authentication company is used",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Modify Unvired User",
        "description": "Modifies an Unvired User, only values submitted are changed. The current user, Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company can access this API",
        "operationId": "updateUserUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to modify",
            "required": true,
            "type": "string",
            "default": ":me"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company the user belongs to, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First Name of the  user to create",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last Name of the  user to create",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Phone number of the  user",
            "required": false,
            "type": "string"
          },
          {
            "name": "mailId",
            "in": "query",
            "description": "Email Id of the  user to create",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Enable or Disable a user, only a SA or admin can do this",
            "required": false,
            "type": "string"
          },
          {
            "name": "verifyMail",
            "in": "query",
            "description": "Should the email be verified?  If true, an email with a one time token to verify the email will be sent",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "User updated",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/backendusers": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create Backend User",
        "description": "Create a new Backend User for the Unvired user. Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company can access this API",
        "operationId": "createBackendUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to create the backend user for",
            "required": true,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company the users belong to, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "query",
            "description": "Port (System) for which to add the backend user for",
            "required": true,
            "type": "string"
          },
          {
            "name": "backendUser",
            "in": "query",
            "description": "Backend system user",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Backend system password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Backend User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or Unvired User or Port not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/backendusers/{backendUser}/ports/{portName}/": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete Backend User",
        "description": "Delete a Backend User for the Unvired user. Super Admin or Administrator of the current company can access this API",
        "operationId": "deleteBackendUserUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "userName",
            "required": true,
            "type": "string"
          },
          {
            "name": "backendUser",
            "in": "path",
            "description": "Unvired User whose backend user is to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "portName",
            "in": "path",
            "description": "Port (System) that the backend user belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Backend User deleted",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User or Backend User or Port not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/federationusers": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a Federation User",
        "description": "Create a Federation User for the Unvired user / Application. Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company can access this API",
        "operationId": "createFederationUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to create the Federation User for",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "query",
            "description": "The application for which to add the federation user for",
            "required": true,
            "type": "string",
            "default": "ALL"
          },
          {
            "name": "federationUser",
            "in": "query",
            "description": "Federation User to create",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Federation User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User or Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/federationusers/{federationUser}/applications/{appName}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a Federation User",
        "description": "Delete a Federation User for the Unvired user / Application. Super Admin or Administrator of the current company can access this API",
        "operationId": "deleteFederationUserUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User that the Federation User belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "federationUser",
            "in": "path",
            "description": "Federation User to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "path",
            "description": "Application that the Federation User belongs to",
            "required": true,
            "type": "string",
            "default": "ALL"
          }
        ],
        "responses": {
          "201": {
            "description": "Federation User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User or Application not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/frontendusers": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create Frontend User or Device",
        "description": "Create a new Frontend User or Device for the Unvired user. Super Admin or Administrator of the root company (disallowed in High Security mode) or the current company can access this API",
        "operationId": "createFrontendUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User to add the frontend user for",
            "required": true,
            "type": "string"
          },
          {
            "name": "company",
            "in": "query",
            "description": "Company the users belong to, if empty authentication company is used",
            "required": false,
            "type": "string"
          },
          {
            "name": "frontend",
            "in": "query",
            "description": "Frontend or Device type to add the frontend user for",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "query",
            "description": "Unique Frontend or device identifier of the  user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Frontend User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Company or Unvired User not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/API/v2/users/{userName}/frontendusers/{frontendUser}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete Frontend User or Device",
        "description": "Delete a Frontend User or Device for the Unvired user. Super Admin or Administrator of the current company can access this API",
        "operationId": "deleteFrontendUserUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Unvired User whose frontend user is to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "frontendUser",
            "in": "path",
            "description": "Frontend User to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Frontend User deleted",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid data supplied"
          },
          "401": {
            "description": "Incorrect password/authkey, password expired or REST API disabled"
          },
          "403": {
            "description": "Company plan has expired or does not have a valid plan"
          },
          "404": {
            "description": "Unvired User or Frontend user not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "Company": {
      "properties": {
        "address": {
          "type": "string"
        },
        "altPhone": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "compAlias": {
          "type": "string"
        },
        "compEmail": {
          "type": "string"
        },
        "compName": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "customerType": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "plan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivePlan"
          }
        },
        "state": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      }
    },
    "ExecuteForResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        }
      }
    },
    "Os": {
      "properties": {
        "architecture": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Port": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "system": {
          "type": "string"
        }
      }
    },
    "CompanyResponse": {
      "properties": {
        "comp": {
          "$ref": "#/definitions/Company"
        },
        "company": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        }
      }
    },
    "Cpu": {
      "properties": {
        "cores": {
          "type": "string"
        },
        "utilization": {
          "type": "string"
        }
      }
    },
    "GroupsResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "MessageCountResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Result"
        }
      }
    },
    "Result": {
      "properties": {
        "convId": {
          "type": "string"
        },
        "device": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "pending": {
          "type": "string"
        },
        "ready": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "AttachmentResponse": {
      "properties": {
        "attachmentId": {
          "type": "string"
        },
        "cacheLocation": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "UmpNodeResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "installedOs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Os"
          }
        },
        "javaDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JavaDetails"
          }
        },
        "lastBeatTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "operatingCpu": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cpu"
          }
        },
        "runningHost": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Host"
          }
        },
        "status": {
          "type": "string"
        },
        "systemRam": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ram"
          }
        },
        "umpDisk": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disk"
          }
        }
      }
    },
    "Disk": {
      "properties": {
        "free": {
          "type": "string"
        },
        "total": {
          "type": "string"
        },
        "used": {
          "type": "string"
        }
      }
    },
    "MessageResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "AsyncMessage": {
      "properties": {
        "dataReceived": {
          "type": "string"
        },
        "dataSent": {
          "type": "string"
        },
        "delivered": {
          "type": "string"
        },
        "discarded": {
          "type": "string"
        },
        "failed": {
          "type": "string"
        },
        "held": {
          "type": "string"
        },
        "ignored": {
          "type": "string"
        },
        "queued": {
          "type": "string"
        },
        "ready": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "Setting": {
      "properties": {
        "name": {
          "type": "string"
        },
        "secure": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PushMessageResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        }
      }
    },
    "UmpResponse": {
      "properties": {
        "applications": {
          "type": "string"
        },
        "backends": {
          "type": "string"
        },
        "buildNo": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "edition": {
          "type": "string"
        },
        "frotends": {
          "type": "string"
        },
        "installationType": {
          "type": "string"
        },
        "noOfUserLicensesUsed": {
          "type": "string"
        },
        "nodes": {
          "type": "string"
        },
        "plan": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        },
        "serverId": {
          "type": "string"
        },
        "serverType": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "SyncMessage": {
      "properties": {
        "dataReceived": {
          "type": "string"
        },
        "dataSent": {
          "type": "string"
        },
        "failed": {
          "type": "string"
        },
        "success": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "DeployedUser": {
      "properties": {
        "deviceId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "unviredId": {
          "type": "string"
        }
      }
    },
    "RedisProperty": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Library": {
      "properties": {
        "description": {
          "type": "string"
        },
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Function"
          }
        },
        "name": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        }
      }
    },
    "ApplicationUserResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "nextOffset": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployedUser"
          }
        }
      }
    },
    "SessionResponse": {
      "properties": {
        "authKey": {
          "type": "string"
        },
        "buildNo": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "expire": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "serverId": {
          "type": "string"
        },
        "serverType": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "unviredId": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrontendUser"
          }
        }
      }
    },
    "Application": {
      "properties": {
        "activated": {
          "type": "string"
        },
        "asyncMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AsyncMessage"
          }
        },
        "deployed": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paType": {
          "type": "string"
        },
        "syncMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncMessage"
          }
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Group": {
      "properties": {
        "descrption": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "properties": {
        "authKey": {
          "type": "string"
        },
        "backendUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BackendUser"
          }
        },
        "email": {
          "type": "string"
        },
        "federationUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FederationUser"
          }
        },
        "firstName": {
          "type": "string"
        },
        "frontendUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FrontendUser"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "lastName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "userType": {
          "type": "string"
        }
      }
    },
    "Message": {
      "properties": {
        "convId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "unviredId": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "UsersResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "nextoffset": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "ActivationResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ActivePlan": {
      "properties": {
        "fromDate": {
          "type": "string"
        },
        "planName": {
          "type": "string"
        },
        "planStatus": {
          "type": "string"
        },
        "planType": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        }
      }
    },
    "BackendUser": {
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "type": "string"
        }
      }
    },
    "Notification": {
      "properties": {
        "application": {
          "type": "string"
        },
        "conversationId": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "postTime": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "Function": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ApplicationPropertiesResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "property": {
          "$ref": "#/definitions/Property"
        }
      }
    },
    "DownloadMsgResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "LibraryResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "library": {
          "$ref": "#/definitions/Library"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Property": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ApplicationUndeploymentResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PushNotificationResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        }
      }
    },
    "FederationUser": {
      "properties": {
        "application": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Sentinel": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "ApplicationResponse": {
      "properties": {
        "application": {
          "$ref": "#/definitions/Application"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Redis": {
      "properties": {
        "redisProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedisProperty"
          }
        },
        "sentinals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sentinel"
          }
        }
      }
    },
    "ExecuteResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        }
      }
    },
    "Host": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "serverTime": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      }
    },
    "ApplicationUserSettingsResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Setting"
          }
        }
      }
    },
    "StatusResponse": {
      "properties": {
        "application": {
          "$ref": "#/definitions/Application"
        },
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          }
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "redis": {
          "$ref": "#/definitions/Redis"
        },
        "umpNodeResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UmpNodeResponse"
          }
        },
        "umpResponse": {
          "$ref": "#/definitions/UmpResponse"
        }
      }
    },
    "Plan": {
      "properties": {
        "adminUsers": {
          "type": "string"
        },
        "appAdminUsers": {
          "type": "string"
        },
        "applications": {
          "type": "string"
        },
        "communicationUsers": {
          "type": "string"
        },
        "devUsers": {
          "type": "string"
        },
        "deviceData": {
          "type": "string"
        },
        "deviceUsers": {
          "type": "string"
        },
        "frontends": {
          "type": "string"
        },
        "planName": {
          "type": "string"
        },
        "serverData": {
          "type": "string"
        },
        "systems": {
          "type": "string"
        }
      }
    },
    "AuthenticationResponse": {
      "properties": {
        "authKey": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "unviredId": {
          "type": "string"
        }
      }
    },
    "GroupResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ApplicationSettingsResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Setting"
          }
        }
      }
    },
    "UserResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Frontend": {
      "properties": {
        "frontend": {
          "type": "string"
        },
        "frontendType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ApplicationDeploymentResponse": {
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "FrontendUser": {
      "properties": {
        "frontend": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JavaDetails": {
      "properties": {
        "freeMemory": {
          "type": "string"
        },
        "totalMemory": {
          "type": "string"
        },
        "usedMemory": {
          "type": "string"
        },
        "utilization": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "vmName": {
          "type": "string"
        },
        "vmVendor": {
          "type": "string"
        },
        "vmVersion": {
          "type": "string"
        }
      }
    },
    "Ram": {
      "properties": {
        "free": {
          "type": "string"
        },
        "total": {
          "type": "string"
        },
        "used": {
          "type": "string"
        }
      }
    }
  }
}